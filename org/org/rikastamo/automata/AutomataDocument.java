package org.rikastamo.automata;

/*
 * AutomataDocument.java
 *
 * Created on 6. joulukuuta 2003, 1:17
 *
 *
 */

/**
 *
 * @author  rannala
 */
//import java.awt.Graphics;
//import java.awt.event.*;
import java.awt.Point;
//import java.awt.Rectangle;
import java.util.Vector;
//import java.awt.Color;
import javax.swing.JOptionPane;

public class AutomataDocument extends javax.swing.JInternalFrame {
    public AutomataCanvas canvas2;
    //public Vector rectangles = new Vector();
    int[] kultainen_x, kultainen_y;
    int height, width;
    Point closest = new Point(0,0);
    boolean snap2grid = true;
    public AutomataApp app;
    boolean saved = false;
    /** 
     * Creates new form AutomataDocument 
     */
    public AutomataDocument(AutomataApp appa) {
        app = appa;
        initComponents();
        createGrid();
        createCanvas();
    }
    /**
     * Creates new form AutomataImageDocument
     * @param appa
     * @param image
     */
    public AutomataDocument(AutomataApp appa, java.awt.Image image, int height1, int width1) {
        app = appa;
        height = height1;
        width = width1;
        initComponents();
        createGrid();
        if(image != null){
            createImageCanvas(image);
        }else{
            createCanvas();
        }
    }
      /** Creates new form AutomataDocument */
      public AutomataDocument(AutomataApp appa, int height1, int width1) {
        initComponents();
           app = appa;
        height = height1;
        width = width1;
        createGrid();
        createCanvas();
      }
      /** Creates new form AutomataDocument with a grid*/
    public AutomataDocument(AutomataApp appa, int[] x, int[] y, int height1, int width1) {
        kultainen_x = x;
        kultainen_y = y;
        height = height1;
        width = width1;
        app = appa;
        initComponents();
        createCanvas();
    }
    /**
     *method for creating the reading in height and width values
     */
            public void setDimensions(int a, int b){
                height = a;
                width= b;
                createGrid();
                createCanvas();
            }
    public void setSaved(){
        saved = true;
    }
    public boolean getSaved(){
        return saved;
    }
     /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setForeground(new java.awt.Color(0, 102, 102));
        setIconifiable(true);
        setDoubleBuffered(true);
        setMaximumSize(new java.awt.Dimension(1200, 1200));
        setMinimumSize(new java.awt.Dimension(100, 100));
        setPreferredSize(new java.awt.Dimension(600, 600));
        setRequestFocusEnabled(false);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                focusOn(evt);
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void focusOn(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focusOn
        //päivitä jdesktoppanen isännän toolbaria
        AutomataElement ae = (AutomataElement)canvas2.elements.elementAt(canvas2.selected_element);
        //app.jToolBar1.jTabbedPane1.jPanel2.jTable1
    }//GEN-LAST:event_focusOn

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
         // ask for saving
         if(!saved){
         int response = JOptionPane.showConfirmDialog(null, "Closing document without saving?", "Closing document",JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
         if( response == JOptionPane.OK_OPTION){ 
             app.documents.remove(this);  
             //TODO pitää myös flushata document-tabi
             dispose();
         } else if(response == JOptionPane.CANCEL_OPTION){    
             app.saveAndClose(app.documents.indexOf(this));
             dispose();
         }
         }
    }//GEN-LAST:event_formInternalFrameClosing
    /**
     * Creates a new canvas, AutamataCanvas2 was the original - need to change to the new AutomataCanvas class
     */
    private void createCanvas(){
        canvas2 = new AutomataCanvas(app, kultainen_x, kultainen_y, height, width);
        getContentPane().add(canvas2, java.awt.BorderLayout.CENTER);
    }
    /**
     * Creates a new Image Cancas
     */
    private void createImageCanvas(java.awt.Image img){
        canvas2 = new AutomataImageCanvas(app, img, kultainen_x, kultainen_y, height, width);
        getContentPane().add(canvas2, java.awt.BorderLayout.CENTER);
    }
    private void createGrid(){
        AutomataEngine engine = new AutomataEngine();
        kultainen_x =  engine.laskeKultainen(20, width); //int tarkkuus, int leveys
        kultainen_y =  engine.laskeKultainen(20, height);
        //engine.laskeKultaisetKulmat(25); kokeilu vaan
    }
    /**
     * Return the rectangles vector
     */
    public Vector getVector(){
        //return canvas2.rectangles;
        return canvas2.elements;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
